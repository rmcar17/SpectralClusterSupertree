[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.4"]

[project]
authors = [{ name = "Robert McArthur" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13"
]
dependencies = ["click", "numpy", "cogent3>=2025.5.8a9", "scikit-learn>=1.5.2"]
keywords = [
  "supertree",
  "phylogeny",
  "biology",
  "bioinformatics"
]
license = { file = "LICENSE" }
name = "sc-supertree"
readme = "README.md"
requires-python = ">=3.11"
# the following are inferred from the source code
dynamic = ["version", "description"]

[project.urls]
"Bug Tracker" = "https://github.com/rmcar17/SpectralClusterSupertree/issues"
"Source Code" = "https://github.com/rmcar17/SpectralClusterSupertree"

[project.scripts]
scs = "sc_supertree.cli:scs"

[project.optional-dependencies]
dev = [
  "ruff==0.12.5",
  "click==8.2.1",
  "mypy==1.17.0",
  "docformatter",
  "flit",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "nox"
]
test = ["pytest", "pytest-cov", "pytest-xdist", "nox"]

[project.entry-points."cogent3.app"]
load_trees = "sc_supertree._app:load_trees"
sc_supertree = "sc_supertree._app:sc_supertree"
outgroup_root = "sc_supertree._app:outgroup_root"

[tool.flit.module]
name = "sc_supertree"

[tool.pytest.ini_options]
addopts = ["--strict-config", "-ra"]
testpaths = "tests"

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv"
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = ["C901", "PLR0912", "PLR0913", "PLR2004", "D"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "S101", # asserts allowed in tests...
  "INP001", # __init__.py files are not required...
  "N802", # allow non snake_case function names for fixtures
  "N803", # allow use of fixture constants
  "SLF001", # private member access is useful for testing
  "FBT001", # allow bool pos args for parameterisation
  "D" # don't require docstrings
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
